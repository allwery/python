import os
import math


def gcd(a, b):
    """Вычисляет наибольший общий делитель (НОД) с помощью алгоритма Евклида."""
    while b:
        a, b = b, a % b
    return a


def extended_gcd(a, b):
    """Расширенный алгоритм Евклида для нахождения обратного элемента."""
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = extended_gcd(b % a, a)
        return (g, x - (b // a) * y, y)


def generate_keypair(p, q):
    if p == q:
        raise ValueError("p and q must be different")
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 65537  # Или другое взаимно простое с phi число
    g, d, _ = extended_gcd(e, phi)
    if g != 1:
        raise ValueError("e and phi are not coprime")
    d = d % phi
    if d < 0:
        d += phi
    return ((e, n), (d, n))


def encrypt(message, key):
    e, n = key
    encrypted_message = [(ord(char) ** e) % n for char in message]
    return encrypted_message


def decrypt(encrypted_message, key):
    d, n = key
    decrypted_message = "".join([chr((char ** d) % n) for char in encrypted_message])
    return decrypted_message


def file_encrypt(input_filename, output_filename, public_key):
    try:
        with open(input_filename, 'r') as f:
            data = f.read()
    except FileNotFoundError:
        print(f"Ошибка: файл {input_filename} не найден.")
        return
    encrypted_data = encrypt(data, public_key)
    try:
        with open(output_filename, 'w') as f:
            f.write(" ".join(map(str, encrypted_data)))
    except Exception as e:
        print(f"Ошибка при записи зашифрованного файла: {e}")


def file_decrypt(input_filename, output_filename, private_key):
    try:
        with open(input_filename, 'r') as f:
            encrypted_data = [int(x) for x in f.read().split()]
    except FileNotFoundError:
        print(f"Ошибка: файл {input_filename} не найден.")
        return
    except ValueError:
        print("Ошибка: неверный формат зашифрованного файла")
        return

    try:
        decrypted_data = decrypt(encrypted_data, private_key)
        with open(output_filename, 'w', encoding='utf-8') as f:  # Указали кодировку UTF-8
            f.write(decrypted_data)
    except Exception as e:
        print(f"Ошибка при дешифровании: {e}")


if __name__ == "__main__":
    p = int(input("Введите простое число p (например, 61): "))
    q = int(input("Введите простое число q (например, 53): "))

    public_key, private_key = generate_keypair(p, q)
    print("Открытый ключ:", public_key)
    print("Закрытый ключ:", private_key)

    action = input("Выберите действие (e - шифрование, d - дешифрование): ")
    input_filename = input("Введите имя входного файла: ")
    output_filename = input("Введите имя выходного файла: ")

    if action == 'e':
        file_encrypt(input_filename, output_filename, public_key)
    elif action == 'd':
        file_decrypt(input_filename, output_filename, private_key)
    else:
        print("Некорректное действие.")
