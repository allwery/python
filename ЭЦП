import hashlib
import tkinter as tk

class CryptoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ЭЦП и Шифрование")

        self.create_widgets()

    def calculate_y(self, x, d, w):
        return (x % 100) * d + w

    def encrypt_message(self, message, key):
        return ''.join(chr(ord(char) + key) for char in message)

    def decrypt_message(self, message, key):
        return ''.join(chr(ord(char) - key) for char in message)

    def create_signature(self, message, key):
        hashed = hashlib.sha256((message.strip() + str(key)).encode()).hexdigest()
        print(f"[DEBUG] Созданная подпись: {hashed}")
        return hashed

    def verify_signature(self, message, key, signature):
        expected_signature = hashlib.sha256((message.strip() + str(key)).encode()).hexdigest()
        print(f"[DEBUG] Ожидаемая подпись: {expected_signature}")
        print(f"[DEBUG] Предоставленная подпись: {signature}")
        return expected_signature == signature

    def calculate(self):
        try:
            x = int(self.entry_x.get())
            d = int(self.entry_d.get())
            w = int(self.entry_w.get())
            y = self.calculate_y(x, d, w)
            self.label_y_result['text'] = f"Рассчитанное значение Y: {y}"
        except ValueError:
            self.label_y_result['text'] = "Ошибка: Проверьте входные данные!"

    def process_message(self):
        message = self.text_message.get("1.0", tk.END).strip()
        try:
            key = int(self.entry_key.get())
            signature = self.create_signature(message, key)
            self.entry_signature.delete(0, tk.END)
            self.entry_signature.insert(tk.END, signature)
            encrypted = self.encrypt_message(message, key)
            self.text_encrypted.delete("1.0", tk.END)
            self.text_encrypted.insert(tk.END, encrypted)
            print(f"[DEBUG] Исходное сообщение: {message}")
            print(f"[DEBUG] Зашифрованное сообщение: {encrypted}")
            print(f"[DEBUG] Ключ: {key}")
        except ValueError:
            self.label_verification['text'] = "Ошибка: Неверный ключ!"

    def verify_and_decrypt(self):
        encrypted = self.text_encrypted.get("1.0", tk.END).strip()
        try:
            key = int(self.entry_key.get())
            signature = self.entry_signature.get()
            message = self.decrypt_message(encrypted, key)
            print(f"[DEBUG] Расшифрованное сообщение: {message}")
            is_valid = self.verify_signature(message, key, signature)
            self.label_verification['text'] = f"Подпись корректна: {is_valid}"
            if is_valid:
                self.text_decrypted.delete("1.0", tk.END)
                self.text_decrypted.insert(tk.END, message)
            else:
                self.text_decrypted.delete("1.0", tk.END)
                self.text_decrypted.insert(tk.END, "Подпись некорректна. Сообщение не может быть расшифровано.")
        except ValueError:
            self.label_verification['text'] = "Ошибка: Неверный ключ!"

    def create_widgets(self):
        frame_y = tk.Frame(self.root)
        frame_y.grid(row=0, column=0, padx=10, pady=10)

        tk.Label(frame_y, text="X (дата рождения):").grid(row=0, column=0)
        self.entry_x = tk.Entry(frame_y)
        self.entry_x.grid(row=0, column=1)

        tk.Label(frame_y, text="D (месяц рождения):").grid(row=1, column=0)
        self.entry_d = tk.Entry(frame_y)
        self.entry_d.grid(row=1, column=1)

        tk.Label(frame_y, text="W (день недели):").grid(row=2, column=0)
        self.entry_w = tk.Entry(frame_y)
        self.entry_w.grid(row=2, column=1)

        tk.Button(frame_y, text="Рассчитать Y", command=self.calculate).grid(row=3, column=0, columnspan=2)
        self.label_y_result = tk.Label(frame_y, text="")
        self.label_y_result.grid(row=4, column=0, columnspan=2)

        frame_message = tk.Frame(self.root)
        frame_message.grid(row=1, column=0, padx=10, pady=10)

        tk.Label(frame_message, text="Сообщение:").grid(row=0, column=0)
        self.text_message = tk.Text(frame_message, height=4, width=40)
        self.text_message.grid(row=0, column=1)

        tk.Label(frame_message, text="Ключ:").grid(row=1, column=0)
        self.entry_key = tk.Entry(frame_message)
        self.entry_key.grid(row=1, column=1)

        tk.Button(frame_message, text="Шифровать и Подписать", command=self.process_message).grid(row=2, column=0, columnspan=2)

        tk.Label(frame_message, text="Зашифрованное сообщение:").grid(row=3, column=0)
        self.text_encrypted = tk.Text(frame_message, height=4, width=40)
        self.text_encrypted.grid(row=3, column=1)

        tk.Label(frame_message, text="Подпись:").grid(row=4, column=0)
        self.entry_signature = tk.Entry(frame_message, width=50)
        self.entry_signature.grid(row=4, column=1)

        tk.Button(frame_message, text="Проверить и Расшифровать", command=self.verify_and_decrypt).grid(row=5, column=0, columnspan=2)

        tk.Label(frame_message, text="Подтверждение подписи:").grid(row=6, column=0)
        self.label_verification = tk.Label(frame_message, text="")
        self.label_verification.grid(row=6, column=1)

        tk.Label(frame_message, text="Расшифрованное сообщение:").grid(row=7, column=0)
        self.text_decrypted = tk.Text(frame_message, height=4, width=40)
        self.text_decrypted.grid(row=7, column=1)

if __name__ == "__main__":
    root = tk.Tk()
    app = CryptoApp(root)
    root.mainloop()

