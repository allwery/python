import tkinter as tk

class MICKEY:
    def __init__(self, key, iv):
        self.R = self.initialize_register(key, 16)
        self.S = self.initialize_register(iv, 16)
        self.key_stream = []

    def initialize_register(self, value, size):
        # Инициализация регистра сдвига с обратной связью (LFSR)
        return [int(bit) for bit in '{:0{size}b}'.format(value, size=size)]

    def clock_register(self, register):
        # Функция тактирования регистра
        feedback = register[0] ^ register[4]
        return [feedback] + register[:-1]

    def generate_key_stream(self, length):
        # Генерация ключевого потока
        self.key_stream = []
        for _ in range(length):
            # Тактирование регистров на каждом шаге
            self.R = self.clock_register(self.R)
            self.S = self.clock_register(self.S)
            # Генерация бита ключевого потока
            key_bit = self.R[-1] ^ self.S[-1]
            self.key_stream.append(key_bit)

    def encrypt(self, message):
        binary_message = ''.join(format(ord(char), '08b') for char in message)
        self.generate_key_stream(len(binary_message))
        encrypted_binary = ''.join(str(int(bit) ^ key_bit) for bit, key_bit in zip(binary_message, self.key_stream))
        return ''.join(chr(int(encrypted_binary[i:i+8], 2)) for i in range(0, len(encrypted_binary), 8))

    def decrypt(self, encrypted_message):
        return self.encrypt(encrypted_message)  # Дешифрование аналогично шифрованию

class CryptoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("MICKEY Шифрование")
        self.create_widgets()

    def process_message(self):
        message = self.text_message.get("1.0", tk.END).strip()
        key = int(self.entry_key.get())
        iv = int(self.entry_iv.get())
        mickey = MICKEY(key, iv)
        encrypted = mickey.encrypt(message)
        self.text_encrypted.delete("1.0", tk.END)
        self.text_encrypted.insert(tk.END, encrypted)
        print(f"Original Message: {message}")
        print(f"Encrypted Message: {encrypted}")
        print(f"Key Stream: {mickey.key_stream[:20]}")  # Выводим первые 20 бит ключевого потока

    def verify_and_decrypt(self):
        encrypted = self.text_encrypted.get("1.0", tk.END).strip()
        key = int(self.entry_key.get())
        iv = int(self.entry_iv.get())
        mickey = MICKEY(key, iv)
        decrypted = mickey.decrypt(encrypted)
        self.text_decrypted.delete("1.0", tk.END)
        self.text_decrypted.insert(tk.END, decrypted)
        print(f"Decrypted Message: {decrypted}")

    def create_widgets(self):
        frame_message = tk.Frame(self.root)
        frame_message.grid(row=0, column=0, padx=10, pady=10)

        tk.Label(frame_message, text="Сообщение:").grid(row=0, column=0)
        self.text_message = tk.Text(frame_message, height=4, width=40)
        self.text_message.grid(row=0, column=1)

        tk.Label(frame_message, text="Ключ:").grid(row=1, column=0)
        self.entry_key = tk.Entry(frame_message)
        self.entry_key.grid(row=1, column=1)

        tk.Label(frame_message, text="IV:").grid(row=2, column=0)
        self.entry_iv = tk.Entry(frame_message)
        self.entry_iv.grid(row=2, column=1)

        tk.Button(frame_message, text="Шифровать", command=self.process_message).grid(row=3, column=0, columnspan=2)

        tk.Label(frame_message, text="Зашифрованное сообщение:").grid(row=4, column=0)
        self.text_encrypted = tk.Text(frame_message, height=4, width=40)
        self.text_encrypted.grid(row=4, column=1)

        tk.Button(frame_message, text="Расшифровать", command=self.verify_and_decrypt).grid(row=5, column=0, columnspan=2)

        tk.Label(frame_message, text="Расшифрованное сообщение:").grid(row=6, column=0)
        self.text_decrypted = tk.Text(frame_message, height=4, width=40)
        self.text_decrypted.grid(row=6, column=1)

if __name__ == "__main__":
    root = tk.Tk()
    app = CryptoApp(root)
    root.mainloop()
